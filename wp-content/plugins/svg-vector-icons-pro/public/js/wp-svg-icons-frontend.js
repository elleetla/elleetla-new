/* 	WP SVG Icons Pro Animation Actions 	Written + Licensed by Evan Herman	http://www.evan-herman.com/wp-svg-icons-pro	@since v1.2.5 pro*/	jQuery( document ).ready( function() {			/*		*	Icon & Container animations		*	@since v1.1.3 pro		*/			/* Container & Icon Animations functions (hover) */			jQuery( 'body' ).on( 'mouseenter' , '.animated-icon' , function() {					var animate_on = jQuery( this ).attr( 'data-animate-on' );				// animate container on hover				if( animate_on == 'hover' ) {					var animation = jQuery( this ).attr( 'data-animation' );					var stagger = jQuery( this ).attr( 'data-animation-stagger' );					var element = jQuery( this );					if( stagger != 0 ) {						setTimeout( function() {							element.addClass( 'animated '+animation );						}, stagger );					} else {						element.addClass( 'animated '+animation );					}					// if the animation contains 'out' , and the element wasn't already hidden at start					// we should add the hidden class, to keep our icon hidden after it animates out					element.bind( 'animationend webkitAnimationEnd oAnimationEnd MSAnimationEnd' , function() {						if( animation.indexOf( 'Out' ) > -1 ) {							element.removeClass( 'hidden wp-svg-icon-hidden' );							element.removeClass( 'animated ' + animation );						}						// if the animation contains 'in' and it was originally hidden,						// we should remove the hidden classes after animation is done running						if( animation.indexOf( 'In' ) > -1 ) {							element.removeClass( 'hidden wp-svg-icon-hidden' );							if( animation.indexOf( 'infinite' ) == -1 ) {								element.removeClass( 'animated ' + animation );							}						}						element.removeClass( animation );					});				}			});						/* Container & Icon Animations functions (click) */			jQuery( 'body' ).on( 'click' , '.animated-icon' , function() {				var animate_on = jQuery( this ).attr( 'data-animate-on' );				if( animate_on == 'click' ) {						var animation = jQuery( this ).attr( 'data-animation' );					var stagger = jQuery( this ).attr( 'data-animation-stagger' );					var element = jQuery( this );					if( stagger != 0 ) {						setTimeout( function() {							element.addClass( 'animated '+animation );						}, stagger );					} else {						element.addClass( 'animated '+animation );					}					// if the animation contains 'out' , and the element wasn't already hidden at start					// we should add the hidden class, to keep our icon hidden after it animates out					element.bind( 'animationend webkitAnimationEnd oAnimationEnd MSAnimationEnd' , function() {						if( animation.indexOf( 'Out' ) > -1 ) {							element.addClass( 'hidden wp-svg-icon-hidden' );							element.removeClass( 'animated ' + animation );						}						// if the animation contains 'in' and it was originally hidden,						// we should remove the hidden classes after animation is done running						if( animation.indexOf( 'In' ) > -1 ) {							element.removeClass( 'hidden wp-svg-icon-hidden' );							if( animation.indexOf( 'infinite' ) == -1 ) {								element.removeClass( 'animated ' + animation );							}						}									element.removeClass( animation );					});				}			});						/* Container & Icon Animations on Scroll !*/			jQuery( '*[data-animate-on]' ).each( function() {				var animate_on =  jQuery( this ).attr( 'data-animate-on' );				// data animate on scroll				if( animate_on == 'scroll' ) {					var animation = jQuery( this ).attr( 'data-animation' );					var stagger = jQuery( this ).attr( 'data-animation-stagger' );					var scroll_element = jQuery( this );					animationOnScroll( scroll_element , stagger , animation );				}				// data animate on load				// check for a data-animate-stagger parameter				if( animate_on == 'load' ) {					var animation = jQuery( this ).attr( 'data-animation' );					var stagger = jQuery( this ).attr( 'data-animation-stagger' );					var element = jQuery( this );					setTimeout(function() {						element.addClass( 'animated '+animation );					}, stagger );					// if the animation contains 'out' , and the element wasn't already hidden at start					// we should add the hidden class, to keep our icon hidden after it animates out					if( animation.indexOf( 'Out' ) > -1 ) {						element.bind( 'animationend webkitAnimationEnd oAnimationEnd MSAnimationEnd' , function() {							element.addClass( 'hidden wp-svg-icon-hidden' );						}); 					}					// if the animation contains 'in' and it was originally hidden,					// we should remove the hidden classes after animation is done running					if( animation.indexOf( 'In' ) > -1 ) {						element.bind( 'animationend webkitAnimationEnd oAnimationEnd MSAnimationEnd' , function() {							element.removeClass( 'hidden wp-svg-icon-hidden' );							if( animation.indexOf( 'infinite' ) == -1 ) {								element.removeClass( 'animated ' + animation );							}						});					}				}			});	});						/* Animation on Scroll (waypoint.js) ! */	function animationOnScroll( element , offset_time , animation ) {		// store the element		element = jQuery( element );		// add our waypoints		element.waypoint({			handler: function(direction) {				element.delay( offset_time ).queue( function() {					element.addClass( 'animated ' +animation );				});			}, 			offset: 'bottom-in-view'		});		// if the animation contains 'out' , and the element wasn't already hidden at start		// we should add the hidden class, to keep our icon hidden after it animates out		if( animation.indexOf( 'Out' ) > -1 ) {			// remove our classes on animation completion			element.bind( 'animationend webkitAnimationEnd oAnimationEnd MSAnimationEnd' , function() {				element.addClass( 'hidden wp-svg-icon-hidden' );			});		}		// if the animation contains 'in' and it was originally hidden,		// we should remove the hidden classes after animation is done running		if( animation.indexOf( 'In' ) > -1 ) {			element.bind( 'animationend webkitAnimationEnd oAnimationEnd MSAnimationEnd' , function() {				element.removeClass( 'hidden wp-svg-icon-hidden' );				if( animation.indexOf( 'infinite' ) == -1 ) {					element.removeClass( 'animated ' + animation );				}			});		}	}